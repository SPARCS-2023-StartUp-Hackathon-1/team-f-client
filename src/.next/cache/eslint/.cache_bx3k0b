[{"/Users/chaerimkim/team-f-client/src/pages/_app.tsx":"1","/Users/chaerimkim/team-f-client/src/pages/index.tsx":"2","/Users/chaerimkim/team-f-client/src/pages/onboarding/[mainCategoryId]/index.tsx":"3","/Users/chaerimkim/team-f-client/src/pages/onboarding/index.tsx":"4","/Users/chaerimkim/team-f-client/src/pages/question/[categoryId]/index.tsx":"5","/Users/chaerimkim/team-f-client/src/components/GlobalErrorFallback.tsx":"6","/Users/chaerimkim/team-f-client/src/components/QueryClientProvider.tsx":"7","/Users/chaerimkim/team-f-client/src/components/QueryErrorBoundary.tsx":"8","/Users/chaerimkim/team-f-client/src/components/RecoilDebugObserver.tsx":"9","/Users/chaerimkim/team-f-client/src/components/common/AIBubble/index.tsx":"10","/Users/chaerimkim/team-f-client/src/components/common/AIBubbleSkeleton/index.tsx":"11","/Users/chaerimkim/team-f-client/src/components/common/Button/index.tsx":"12","/Users/chaerimkim/team-f-client/src/components/common/Chip/index.tsx":"13","/Users/chaerimkim/team-f-client/src/components/common/GNB/index.tsx":"14","/Users/chaerimkim/team-f-client/src/components/common/Header/index.tsx":"15","/Users/chaerimkim/team-f-client/src/components/common/Icon/icons.ts":"16","/Users/chaerimkim/team-f-client/src/components/common/Icon/index.tsx":"17","/Users/chaerimkim/team-f-client/src/components/common/Icon/svg.d.ts":"18","/Users/chaerimkim/team-f-client/src/components/common/Input/index.tsx":"19","/Users/chaerimkim/team-f-client/src/components/common/Layout/index.tsx":"20","/Users/chaerimkim/team-f-client/src/components/common/Modal/index.tsx":"21","/Users/chaerimkim/team-f-client/src/components/common/Select/Option.tsx":"22","/Users/chaerimkim/team-f-client/src/components/common/Select/index.tsx":"23","/Users/chaerimkim/team-f-client/src/components/common/UserBubble/index.tsx":"24","/Users/chaerimkim/team-f-client/src/components/common/pageMark/index.tsx":"25","/Users/chaerimkim/team-f-client/src/components/Question/Button/index.tsx":"26","/Users/chaerimkim/team-f-client/src/components/Question/QuestionMain.tsx":"27","/Users/chaerimkim/team-f-client/src/components/Question/TailQuestion.tsx":"28","/Users/chaerimkim/team-f-client/src/components/Question/index.tsx":"29"},{"size":1271,"mtime":1674933300322,"results":"30","hashOfConfig":"31"},{"size":658,"mtime":1674933840877,"results":"32","hashOfConfig":"31"},{"size":1814,"mtime":1674927408145,"results":"33","hashOfConfig":"31"},{"size":1659,"mtime":1674933194521,"results":"34","hashOfConfig":"31"},{"size":1813,"mtime":1674933194521,"results":"35","hashOfConfig":"31"},{"size":309,"mtime":1674829801349,"results":"36","hashOfConfig":"31"},{"size":1041,"mtime":1674829801349,"results":"37","hashOfConfig":"31"},{"size":726,"mtime":1674829801349,"results":"38","hashOfConfig":"31"},{"size":613,"mtime":1674829801349,"results":"39","hashOfConfig":"31"},{"size":1486,"mtime":1674900476359,"results":"40","hashOfConfig":"31"},{"size":1604,"mtime":1674900476359,"results":"41","hashOfConfig":"31"},{"size":2205,"mtime":1674927408143,"results":"42","hashOfConfig":"31"},{"size":476,"mtime":1674900476359,"results":"43","hashOfConfig":"31"},{"size":250,"mtime":1674900476360,"results":"44","hashOfConfig":"31"},{"size":1605,"mtime":1674933946899,"results":"45","hashOfConfig":"31"},{"size":781,"mtime":1674917247104,"results":"46","hashOfConfig":"31"},{"size":551,"mtime":1674908200369,"results":"47","hashOfConfig":"31"},{"size":24,"mtime":1674829801350,"results":"48","hashOfConfig":"31"},{"size":1671,"mtime":1674900476361,"results":"49","hashOfConfig":"31"},{"size":521,"mtime":1674927408144,"results":"50","hashOfConfig":"31"},{"size":287,"mtime":1674900476361,"results":"51","hashOfConfig":"31"},{"size":895,"mtime":1674933963009,"results":"52","hashOfConfig":"31"},{"size":309,"mtime":1674900476361,"results":"53","hashOfConfig":"31"},{"size":570,"mtime":1674900476362,"results":"54","hashOfConfig":"31"},{"size":464,"mtime":1674933194520,"results":"55","hashOfConfig":"31"},{"size":643,"mtime":1674927408143,"results":"56","hashOfConfig":"31"},{"size":72,"mtime":1674927408143,"results":"57","hashOfConfig":"31"},{"size":3565,"mtime":1674933194519,"results":"58","hashOfConfig":"31"},{"size":3948,"mtime":1674933194519,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d86sy9",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},"/Users/chaerimkim/team-f-client/src/pages/_app.tsx",[],[],"/Users/chaerimkim/team-f-client/src/pages/index.tsx",["153","154"],[],"import { Button } from '@/components/common/Button';\nimport { useRouter } from 'next/router';\n\nexport default function Home() {\n  const router = useRouter();\n  const onClick = () => {\n    router.push('/onboarding');\n  };\n  \n  return (\n    <div className=\"w-full flex-col text-center\">\n      <header className=\"pt-[75px] text-h2 text-gray-600\">Service Name</header>\n      <div className=\"text-b1 mt-[12px] text-gray-600\">AI 꼬리질문으로 준비하는 면접</div>\n      <img className=\"mt-[24px] mx-auto w-[328px] h-[328px] bg-gray-100 mb-[24px]\"></img>\n      <Button onClick={onClick} buttonType=\"primary\" buttonText=\"시작하기\" />\n    </div>\n  );\n}\n","/Users/chaerimkim/team-f-client/src/pages/onboarding/[mainCategoryId]/index.tsx",["155"],[],"import { Button } from '@/components/common/Button';\nimport { Icon } from '@/components/common/Icon';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useMidCategoryQuery } from '@/hooks/queries/useMidCategoryQuery';\nimport { useRouter } from 'next/router';\n\nconst IMAGE_SRC =\n  'https://images.unsplash.com/photo-1661961110671-77b71b929d52?ixlib=rb-4.0.3&ixid=MnwxMjA3fDF8MHxlZGl0b3JpYWwtZmVlZHwxfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60';\n\nconst Category = () => {\n  const router = useRouter();\n  const { data, isSuccess } = useMidCategoryQuery({ id: router.query.mainCategoryId as string });\n\n  const handleChangeButtonClick = () => {\n    router.back();\n  };\n\n  return (\n    <>\n      <header className=\"flex w-full justify-between py-[2rem]\">\n        <Icon iconName=\"logo\" width={40} height={18} />\n        <Icon iconName=\"setting\" size={24} />\n      </header>\n      <article>\n        <section>\n          <p className=\"text-b1 text-gray-600\">내 희망직무</p>\n          <div className=\"flex justify-between items-center mt-[0.8rem]\">\n            {isSuccess && <p className=\"text-h2 text-gray-800\">{data.name}</p>}\n            <Button onClick={handleChangeButtonClick} buttonText=\"변경\" buttonType=\"extra\" />\n          </div>\n        </section>\n        <section className=\"grid grid-cols-2 gap-[0.8rem] mt-[2rem]\">\n          {data?.categories.map((category, index) => {\n            return (\n              <Link key={index} href={`/question/${category.id}`}>\n                <Image\n                  src={category.imageUrl === '' ? IMAGE_SRC : `${category.imageUrl}`}\n                  width={160}\n                  height={160}\n                />\n              </Link>\n            );\n          })}\n        </section>\n      </article>\n    </>\n  );\n};\n\nexport default Category;\n","/Users/chaerimkim/team-f-client/src/pages/onboarding/index.tsx",["156"],[],"import { getMainCategories } from '@/apis';\nimport { Button } from '@/components/common/Button';\nimport { GNB } from '@/components/common/GNB';\nimport Select from '@/components/common/Select';\nimport { useMainCategoryQuery } from '@/hooks/queries/useMainCategoryQuery';\nimport useCategoryButton from '@/hooks/useCategoryButton';\nimport { questionAtomFamily, questionOrderAtom } from '@/store/question';\nimport { dehydrate, QueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/router';\nimport { useEffect } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nexport async function getStaticProps() {\n  const queryClient = new QueryClient();\n\n  await queryClient.prefetchQuery(['mainCategories'], getMainCategories);\n\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient),\n    },\n  };\n}\n\nconst Onboarding = () => {\n  const router = useRouter();\n  const order = useRecoilValue(questionOrderAtom);\n  const question = useRecoilValue(questionAtomFamily(order));\n  const { data, isSuccess } = useMainCategoryQuery();\n  const { handleClick, isDisabled } = useCategoryButton({ type: 'main' });\n\n  useEffect(() => {\n    if (question.basicQuestion.id !== 0) router.reload();\n  }, [order]);\n\n  return (\n    <div className=\"h-full\">\n      <h1 className=\"text-h2 text-gray-800 text-center pt-[8rem]\">희망하는 직무를 선택해주세요</h1>\n      {isSuccess && <Select categories={data} />}\n      <GNB>\n        <Button\n          onClick={handleClick}\n          buttonType=\"primary\"\n          buttonText=\"작성 완료\"\n          isDisabled={isDisabled}\n        />\n      </GNB>\n    </div>\n  );\n};\n\nexport default Onboarding;\n","/Users/chaerimkim/team-f-client/src/pages/question/[categoryId]/index.tsx",["157","158"],[],"import { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { Header } from '@/components/common/Header';\nimport Question from '@/components/Question';\nimport { useDefaultQuestionQuery } from '@/hooks/queries/useDefaultQuestionQuery';\nimport {\n  questionAtomFamily,\n  questionMarkAtom,\n  questionOrderAtom,\n  tailQuestionIdAtomFamily,\n} from '@/store/question';\nimport { useEffect } from 'react';\nimport { useMidCategoryByIdQuery } from '@/hooks/queries/useMidCategoryByIdQuery';\nimport { useRouter } from 'next/router';\n\nconst QuestionPage = () => {\n  const router = useRouter();\n  const midCategoryId = router?.query?.categoryId;\n  const { data: midCategory, isSuccess: midCategoryIsSuccess } = useMidCategoryByIdQuery(\n    Number(midCategoryId)\n  );\n  const {\n    data: defaultQuestion,\n    isSuccess: defaultQuestionIsSuccess,\n    refetch: defaultQuestionRefetch,\n    isRefetching: defaultQuestionIsRefetching,\n  } = useDefaultQuestionQuery(Number(midCategoryId));\n  const order = useRecoilValue(questionOrderAtom);\n  const mark = useRecoilValue(questionMarkAtom);\n  const setQuestion = useSetRecoilState(questionAtomFamily(order));\n  const setTailQuestionIds = useSetRecoilState(tailQuestionIdAtomFamily(order));\n  useEffect(() => {\n    if (mark === order) defaultQuestionRefetch();\n  }, [order]);\n\n  useEffect(() => {\n    if (defaultQuestionIsSuccess) {\n      setQuestion(prev => ({\n        ...prev,\n        basicQuestion: { id: defaultQuestion.id, question: defaultQuestion.question },\n      }));\n\n      setTailQuestionIds([defaultQuestion.id]);\n    }\n  }, [defaultQuestionIsSuccess, defaultQuestionIsRefetching]);\n\n  return (\n    <div className=\"w-full\">\n      {midCategoryIsSuccess && <Header headerTitle={midCategory.name} />}\n      <Question />\n    </div>\n  );\n};\n\nexport default QuestionPage;\n","/Users/chaerimkim/team-f-client/src/components/GlobalErrorFallback.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/QueryClientProvider.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/QueryErrorBoundary.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/RecoilDebugObserver.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/AIBubble/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/AIBubbleSkeleton/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Button/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Chip/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/GNB/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Header/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Icon/icons.ts",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Icon/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Icon/svg.d.ts",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Input/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Layout/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Modal/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Select/Option.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/Select/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/UserBubble/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/common/pageMark/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/Question/Button/index.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/Question/QuestionMain.tsx",[],[],"/Users/chaerimkim/team-f-client/src/components/Question/TailQuestion.tsx",["159"],[],"import { useAnswerById } from '@/hooks/queries/useAnswerById';\nimport { useTailQuestionById } from '@/hooks/queries/useTailQuestionByIdQuery';\nimport {\n  questionAtomFamily,\n  QuestionAtomFamilyProps,\n  questionMarkAtom,\n  questionOrderAtom,\n  tailQuestionAtomFamily,\n  tailQuestionIdAtomFamily,\n} from '@/store/question/atom';\nimport { ChangeEvent, useEffect } from 'react';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { AIBubble } from '../common/AIBubble';\nimport { Button } from '../common/Button';\nimport { Chip } from '../common/Chip';\nimport { GNB } from '../common/GNB';\nimport { Icon } from '../common/Icon';\nimport { Input } from '../common/Input';\nimport { UserBubble } from '../common/UserBubble';\n\nconst TailQuestion = ({ id }: { id: number }) => {\n  const [order, setOrder] = useRecoilState(questionOrderAtom);\n  const [mark, setMark] = useRecoilState(questionMarkAtom);\n  const setQuestion = useSetRecoilState(questionAtomFamily(order));\n  const { data: tailQuestionData, isSuccess: tailQuestionIsSuccess } = useTailQuestionById(id);\n  const [tailQuestion, setTailQuestion] = useRecoilState(\n    tailQuestionAtomFamily(tailQuestionData?.id as number)\n  );\n  const [tailQuestionIds, setTailQuestionIds] = useRecoilState(tailQuestionIdAtomFamily(order));\n  const { data: aiAnswerData, isSuccess: aiAnswerIsSuccess } = useAnswerById(\n    tailQuestionData?.id as number\n  );\n\n  useEffect(() => {\n    if (aiAnswerIsSuccess)\n      setTailQuestion(prev => ({\n        ...prev,\n        aiAnswer: aiAnswerData.answer,\n      }));\n  }, []);\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setTailQuestion(prev => ({ ...prev, userAnswer: { isAnswer: false, answer: e.target.value } }));\n  };\n\n  const isUserAnswer = tailQuestion.userAnswer.isAnswer;\n\n  const isDisabled = tailQuestion.userAnswer.answer === '' && !isUserAnswer;\n\n  const handleTailButtonClick = () => {\n    if (tailQuestionIsSuccess) setTailQuestionIds(prev => [...prev, tailQuestionData.id]);\n  };\n\n  const handleNextButtonClick = () => {\n    setOrder(mark + 1);\n    setMark(prev => prev + 1);\n  };\n\n  const handleAnswerButtonClick = () => {\n    setTailQuestion(prev => ({\n      ...prev,\n      userAnswer: { isAnswer: true, answer: prev.userAnswer.answer },\n    }));\n  };\n\n  return (\n    <div className=\"w-full\">\n      {tailQuestionIsSuccess && (\n        <AIBubble\n          key={tailQuestionData?.id}\n          questionChip={<Chip text={'꼬리 질문'} chipType={'answer'} />}\n          question={tailQuestionData.question}\n          answerChip={<Chip text={'AI 답변'} chipType={'default'} />}\n          answer={isUserAnswer ? tailQuestion.aiAnswer : ''}\n        />\n      )}\n      {!isUserAnswer && <Input value={tailQuestion.userAnswer.answer} onChange={handleChange} />}\n      {isUserAnswer && <UserBubble answer={tailQuestion.userAnswer.answer} />}\n      <GNB>\n        {isUserAnswer ? (\n          <div className=\"grid grid-cols-[0.8fr_0.2fr] gap-[1rem]\">\n            <Button onClick={handleTailButtonClick} buttonType=\"primary\" buttonText=\"꼬리 질문\" />\n            <Button\n              onClick={handleNextButtonClick}\n              buttonType=\"sub\"\n              buttonIcon={<Icon iconName=\"rightArrow\" size={24} />}\n            />\n          </div>\n        ) : (\n          <Button\n            onClick={handleAnswerButtonClick}\n            buttonType=\"primary\"\n            buttonText=\"작성 완료\"\n            isDisabled={isDisabled}\n          />\n        )}\n      </GNB>\n    </div>\n  );\n};\n\nexport default TailQuestion;\n","/Users/chaerimkim/team-f-client/src/components/Question/index.tsx",["160"],[],"import { useAnswerById } from '@/hooks/queries/useAnswerById';\nimport {\n  questionAtomFamily,\n  questionMarkAtom,\n  questionOrderAtom,\n  tailQuestionIdAtomFamily,\n} from '@/store/question';\nimport { ChangeEvent, useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { AIBubble } from '../common/AIBubble';\nimport { Button } from '../common/Button';\nimport { Chip } from '../common/Chip';\nimport { GNB } from '../common/GNB';\nimport { Icon } from '../common/Icon';\nimport { Input } from '../common/Input';\nimport { PageMark } from '../common/pageMark';\nimport { UserBubble } from '../common/UserBubble';\nimport TailQuestion from './TailQuestion';\n\nconst Question = () => {\n  const [order, setOrder] = useRecoilState(questionOrderAtom);\n  const [mark, setMark] = useRecoilState(questionMarkAtom);\n  const [question, setQuestion] = useRecoilState(questionAtomFamily(order));\n  const [tailQuestionIds, setTailQuestionIds] = useRecoilState(tailQuestionIdAtomFamily(order));\n  const { data: aiAnswerData, isSuccess: aiAnswerIsSuccess } = useAnswerById(\n    question.basicQuestion.id\n  );\n\n  const isUserAnswer = question.userAnswer.isAnswer;\n\n  const isDisabled = question.userAnswer.answer === '' && !isUserAnswer;\n\n  useEffect(() => {\n    if (aiAnswerIsSuccess)\n      setQuestion(prev => ({\n        ...prev,\n        aiAnswer: aiAnswerData.answer,\n      }));\n  }, [aiAnswerIsSuccess]);\n\n  const handleAnswerInput = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setQuestion(prev => ({\n      ...prev,\n      userAnswer: { isAnswer: prev.userAnswer.isAnswer, answer: e.target.value },\n    }));\n  };\n\n  const handleAnswerButtonClick = () => {\n    setQuestion(prev => ({\n      ...prev,\n      userAnswer: { isAnswer: true, answer: prev.userAnswer.answer },\n    }));\n  };\n\n  const handleTailButtonClick = () => {\n    setQuestion(prev => ({\n      ...prev,\n      isTailQuestion: true,\n    }));\n  };\n\n  const handleNextButtonClick = () => {\n    setOrder(mark + 1);\n    setMark(prev => prev + 1);\n  };\n\n  const handleTailAnswerButtonClick = () => {};\n\n  const handleOrderClick = (index: number) => {\n    setOrder(index + 1);\n  };\n\n  return (\n    <div className=\"h-full pb-[100px]\">\n      <div className=\"h-[64px] flex items-center\">\n        {Array(mark)\n          .fill(0)\n          .map((_, index) => (\n            <div\n              key={index}\n              className=\"first:ml-0 ml-[0.8rem]\"\n              onClick={() => handleOrderClick(index)}\n            >\n              <PageMark pageNumber={index + 1} isActive={order === index + 1} />\n            </div>\n          ))}\n      </div>\n      <AIBubble\n        questionChip={<Chip text={'일반 질문'} chipType={'default'} />}\n        question={question.basicQuestion.question}\n        answerChip={<Chip text={'AI 답변'} chipType={'default'} />}\n        answer={isUserAnswer ? question.aiAnswer : ''}\n      />\n      {!isUserAnswer && <Input value={question.userAnswer.answer} onChange={handleAnswerInput} />}\n      {isUserAnswer && <UserBubble answer={question.userAnswer.answer} />}\n      {question.isTailQuestion &&\n        tailQuestionIds.map((id, index) => <TailQuestion key={index} id={id} />)}\n      {!question.isTailQuestion && (\n        <GNB>\n          {isUserAnswer && !question.isTailQuestion ? (\n            <div className=\"grid grid-cols-[0.8fr_0.2fr] gap-[1rem]\">\n              <Button onClick={handleTailButtonClick} buttonType=\"primary\" buttonText=\"꼬리 질문\" />\n              <Button\n                onClick={handleNextButtonClick}\n                buttonType=\"sub\"\n                buttonIcon={<Icon iconName=\"rightArrow\" size={24} />}\n              />\n            </div>\n          ) : (\n            <Button\n              onClick={handleAnswerButtonClick}\n              buttonType=\"primary\"\n              buttonText=\"작성 완료\"\n              isDisabled={isDisabled}\n            />\n          )}\n        </GNB>\n      )}\n    </div>\n  );\n};\n\nexport default Question;\n",{"ruleId":"161","severity":1,"message":"162","line":14,"column":7,"nodeType":"163","endLine":14,"endColumn":84},{"ruleId":"164","severity":1,"message":"165","line":14,"column":7,"nodeType":"163","endLine":14,"endColumn":84},{"ruleId":"164","severity":1,"message":"166","line":37,"column":17,"nodeType":"163","endLine":41,"endColumn":19},{"ruleId":"167","severity":1,"message":"168","line":34,"column":6,"nodeType":"169","endLine":34,"endColumn":13,"suggestions":"170"},{"ruleId":"167","severity":1,"message":"171","line":34,"column":6,"nodeType":"169","endLine":34,"endColumn":13,"suggestions":"172"},{"ruleId":"167","severity":1,"message":"173","line":45,"column":6,"nodeType":"169","endLine":45,"endColumn":61,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"175","line":40,"column":6,"nodeType":"169","endLine":40,"endColumn":8,"suggestions":"176"},{"ruleId":"167","severity":1,"message":"177","line":39,"column":6,"nodeType":"169","endLine":39,"endColumn":25,"suggestions":"178"},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'question.basicQuestion.id' and 'router'. Either include them or remove the dependency array.","ArrayExpression",["179"],"React Hook useEffect has missing dependencies: 'defaultQuestionRefetch' and 'mark'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'defaultQuestion.id', 'defaultQuestion.question', 'setQuestion', and 'setTailQuestionIds'. Either include them or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'aiAnswerData.answer', 'aiAnswerIsSuccess', and 'setTailQuestion'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has missing dependencies: 'aiAnswerData.answer' and 'setQuestion'. Either include them or remove the dependency array.",["183"],{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [order, question.basicQuestion.id, router]",{"range":"194","text":"195"},"Update the dependencies array to be: [defaultQuestionRefetch, mark, order]",{"range":"196","text":"197"},"Update the dependencies array to be: [defaultQuestionIsSuccess, defaultQuestionIsRefetching, setQuestion, setTailQuestionIds, defaultQuestion.id, defaultQuestion.question]",{"range":"198","text":"199"},"Update the dependencies array to be: [aiAnswerData.answer, aiAnswerIsSuccess, setTailQuestion]",{"range":"200","text":"201"},"Update the dependencies array to be: [aiAnswerData.answer, aiAnswerIsSuccess, setQuestion]",{"range":"202","text":"203"},[1212,1219],"[order, question.basicQuestion.id, router]",[1301,1308],"[defaultQuestionRefetch, mark, order]",[1572,1627],"[defaultQuestionIsSuccess, defaultQuestionIsRefetching, setQuestion, setTailQuestionIds, defaultQuestion.id, defaultQuestion.question]",[1578,1580],"[aiAnswerData.answer, aiAnswerIsSuccess, setTailQuestion]",[1379,1398],"[aiAnswerData.answer, aiAnswerIsSuccess, setQuestion]"]